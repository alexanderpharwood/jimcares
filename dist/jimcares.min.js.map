{"version":3,"file":"jimcares.min.js","sources":["../src/helpers/driver.js","../src/api/getRoot.js","../src/helpers/getPathProps.js","../src/api/getValue.js","../src/api/size.js","../src/helpers/sizeof.js","../src/helpers/setUpdatedAt.js","../src/api/toJson.js","../src/api/forget.js","../src/helpers/dateFromDifferenceString.js","../src/helpers/dateAdd.js","../src/api/initialise.js","../src/Jim.js","../src/api/has.js","../src/api/remember.js","../src/api/writeToLS.js","../src/api/trash.js","../src/api/isTrashed.js","../src/api/flush.js","../src/api/destroy.js","../src/api/count.js","../src/api/equals.js"],"sourcesContent":["function driver(){\n\tif (typeof window.__jimcares === 'undefined') {\n\t\tthrow new Error('Jim is not initialised yet. Call Jim.init({options}) first');\n\t}\n\n\treturn window.__jimcares;\n}\n\nexport default driver;\n","import driver from '../helpers/driver.js';\n\nfunction getRoot(path) {\n\tif (typeof path !== 'string') {\n\t\tthrow new TypeError(\"differance must be of type 'string': '\" + typeof path + \"' given.\");\n \t}\n\t\n\tlet memory = driver();\n\treturn memory.roots[path];\n}\n\nexport default getRoot;\n","function getPathProps(path) {\n\treturn path.split(window.__jimcares.queryNotation);\n}\n\nexport default getPathProps;\n","import driver from '../helpers/driver.js';\nimport getPathProps from '../helpers/getPathProps.js';\n\nfunction getValue(path) {\n\tif (typeof path !== 'string') {\n\t\tthrow new TypeError(\"differance must be of type 'string': '\" + typeof path + \"' given.\");\n \t}\n\t\n\tlet memory = driver();\n\tlet pathProps = getPathProps(path);\n\n\tif (pathProps.length === 0) {\n\t\treturn memory.roots[path].value;\n\t}\n\n\tif (typeof memory.roots[pathProps[0]] === 'undefined') {\n\t\treturn undefined;\n\t}\n\n\tvar node = memory.roots[pathProps[0]].value;\n\tpathProps.shift();\n\t\n\tfor (let index in pathProps) {\n\t\tif (typeof node[pathProps[index]] === 'undefined') {\n\t\t\treturn undefined;\n\t\t}\n\t\t\n\t\tnode = node[pathProps[index]];\n\t}\n\n\treturn node;\n}\n\nexport default getValue;\n","import driver from '../helpers/driver.js';\nimport sizeof from '../helpers/sizeof.js';\n\nfunction size(path) {\n\treturn sizeof(driver().roots);\n}\n\nexport default size;\n","/*\n\nsizeof.js\n\nA function to calculate the approximate memory usage of objects\n\nCreated by Kate Morley - http://code.iamkate.com/ - and released under the terms\nof the CC0 1.0 Universal legal code:\n\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n*/\n\n/* Returns the approximate memory usage, in bytes, of the specified object. The\n * parameter is:\n *\n * object - the object whose size should be determined\n */\nfunction sizeof(object){\n\n  // initialise the list of objects and size\n  var objects = [object];\n  var size    = 0;\n\n  // loop over the objects\n  for (var index = 0; index < objects.length; index ++){\n\n\t// determine the type of the object\n\tswitch (typeof objects[index]){\n\n\t  // the object is a boolean\n\t  case 'boolean': size += 4; break;\n\n\t  // the object is a number\n\t  case 'number': size += 8; break;\n\n\t  // the object is a string\n\t  case 'string': size += 2 * objects[index].length; break;\n\n\t  // the object is a generic object\n\t  case 'object':\n\n\t\t// if the object is not an array, add the sizes of the keys\n\t\tif (Object.prototype.toString.call(objects[index]) != '[object Array]'){\n\t\t  for (var key in objects[index]) size += 2 * key.length;\n\t\t}\n\n\t\t// loop over the keys\n\t\tfor (var key in objects[index]){\n\n\t\t  // determine whether the value has already been processed\n\t\t  var processed = false;\n\t\t  for (var search = 0; search < objects.length; search ++){\n\t\t\tif (objects[search] === objects[index][key]){\n\t\t\t  processed = true;\n\t\t\t  break;\n\t\t\t}\n\t\t  }\n\n\t\t  // queue the value to be processed if appropriate\n\t\t  if (!processed) objects.push(objects[index][key]);\n\n\t\t}\n\n\t}\n\n  }\n\n  // return the calculated size\n  return size;\n\n}\n\nexport default sizeof;\n","import driver from '../helpers/driver.js';\n\nfunction setUpdatedAt() {\n\tdriver().updated_at = new Date();\n}\n\nexport default setUpdatedAt;\n","import driver from '../helpers/driver.js';\n\nfunction toJson(path) {\n\treturn JSON.stringify(driver());\n}\n\nexport default toJson;\n","import driver from '../helpers/driver.js';\nimport getPathProps from '../helpers/getPathProps.js';\nimport setUpdatedAt from '../helpers/setUpdatedAt.js';\n\nfunction forget(path) {\n\tif (typeof path !== 'string') {\n\t\tthrow new TypeError(\"path must be of type 'string': '\" + typeof path + \"' given.\");\n\t}\n\t\n\tlet memory = driver();\n\tlet pathProps = getPathProps(path);\n\tsetUpdatedAt();\n\treturn delete memory.roots[path];\n}\n\nexport default forget;\n","import dateAdd from './dateAdd.js';\n\nfunction dateFromDifferenceString(difference) {\n\tif (typeof difference !== 'string') {\n\t\tthrow new TypeError(\"differance must be of type 'string': '\" + typeof difference + \"' given.\");\n \t}\n\n\tvar date = new Date();\n\tvar interval = difference.split(' ')[1];\n\tvar units = difference.split(' ')[0];\n\tdate = dateAdd(date, interval, units);\n\treturn date;\n}\n\nexport default dateFromDifferenceString;\n","/**\n * Adds time to a date. Modelled after MySQL DATE_ADD function.\n * Example: dateAdd(new Date(), 'minute', 30)  //returns 30 minutes from now.\n * https://stackoverflow.com/a/1214753/18511\n *\n * @param date  Date to start with\n * @param interval  One of: year, month, week, day, hour, minute, second\n * @param units  Number of units of the given interval to add.\n */\nfunction dateAdd(date, interval, units) {\n\tvar ret = new Date(date); //don't change original date\n\tvar checkRollover = function() {\n\t\tif (ret.getDate() !== date.getDate()) {\n\t\t\tret.setDate(0);\n\t\t}\n\t}\n\n\tswitch(interval.toLowerCase()) {\n\t\tcase 'year':\n\t\tcase 'years':\n\t\t\tret.setFullYear(ret.getFullYear() + units);\n\t\t\tcheckRollover();\n\t\t\tbreak;\n\t\tcase 'month':\n\t\tcase 'months':\n\t\t\tret.setMonth(ret.getMonth() + units);\n\t\t\tcheckRollover();\n\t\t\tbreak;\n\t\tcase 'week':\n\t\tcase 'weeks':\n\t\t\tret.setDate(ret.getDate() + 7*units);\n\t\t\tbreak;\n\t\tcase 'day':\n\t\tcase 'days':\n\t\t\tret.setDate(ret.getDate() + units);\n\t\t\tbreak;\n\t\tcase 'hour':\n\t\tcase 'hours':\n\t\t\tret.setTime(ret.getTime() + units*3600000);\n\t\t\tbreak;\n\t\tcase 'minute':\n\t\tcase 'minutes':\n\t\t\tret.setTime(ret.getTime() + units*60000);\n\t\t\tbreak;\n\t\tcase 'second':\n\t\tcase 'seconds':\n\t\t\tret.setTime(ret.getTime() + units*1000);\n\t\t\tbreak;\n\t\tdefault       :\n\t\t\tret = undefined;\n\t\t\tbreak;\n\t}\n\n\treturn ret;\n}\n\nexport default dateAdd;\n","import dateAdd from '../helpers/dateAdd.js';\nimport driver from '../helpers/driver.js';\nimport forget from '../api/forget.js';\nimport getRoot from '../api/getRoot.js';\n\n\n/**\n * Initialise Jimcares\n *\n * @param object settings\n * @return bool\n */\nfunction init(settings) {\n\n\t//Default settings\n\tlet defaultExpiration = '24 hours';\n\tlet queryNotation = '/';\n\n\tif (typeof settings !== 'undefined') {\n\t\tif (typeof settings.defaultExpiration !== 'undefined') {\n\t\t\tlet defaultExpiration = settings.defaultExpiration;\n\t\t}\n\t\tif (typeof settings.queryNotation !== 'undefined') {\n\t\t\tlet queryNotation = settings.queryNotation;\n\t\t}\n\t}\n\t\n\tif (typeof defaultExpiration !== 'string') {\n\t\tthrow new TypeError(\"options.defaultExpiration must be of type 'string': '\" + typeof defaultExpiration + \"' given.\");\n\t}\n\n\twindow.__jimcares = {\n\t\tcreated_at: new Date(),\n\t\tupdated_at: new Date(),\n\t\troots: {},\n\t\tdefaultExpiration: defaultExpiration,\n\t\tqueryNotation: queryNotation,\n\t};\n\n\tlet expirationWorker = function(){\n\t\treturn setInterval(function(){\n\t\t\tfor (let i in window.__jimcares.roots) {\n\t\t\t\tif (getRoot(i).expires_at.getTime() < (new Date()).getTime()) {\n\t\t\t\t \tforget(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}, 5000)\n\t};\n\n\twindow.__jimcares.expirationWorker = expirationWorker();\n\n\treturn true;\n}\n\nexport default init;\n","import has from './api/has.js';\nimport size from './api/size.js';\nimport trash from './api/trash.js';\nimport flush from './api/flush.js';\nimport count from './api/count.js';\nimport equals from './api/equals.js';\nimport toJson from './api/toJson.js';\nimport forget from './api/forget.js';\nimport getRoot from './api/getRoot.js';\nimport destroy from './api/destroy.js';\nimport getValue from './api/getValue.js';\nimport remember from './api/remember.js';\nimport isTrashed from './api/isTrashed.js';\nimport writeToLS from './api/writeToLS.js';\nimport initialise from './api/initialise.js';\n\nclass Jim {\n\n\tstatic init() {\n\t\treturn initialise();\n\t}\n\n\t/**\n\t * Determine whether jim has the given path.\n\t *\n\t * @param string path\n\t * @return bool\n\t */\n\tstatic has(path) {\n\t\treturn has(path);\n\t}\n\n\t/**\n\t * Save a value at the given path.\n\t *\n\t * @param string path\n\t * @param mixed value\n\t * @return bool\n\t */\n\tstatic remember(path, value, expires_at) {\n\t\treturn remember(path, value, expires_at);\n\t}\n\n\t/**\n\t * Get the value from the given path.\n\t *\n\t * @param string path\n\t * @return mixed\n\t */\n\tstatic get(path) {\n\t\treturn getValue(path);\n\t}\n\n\t/**\n\t * Get the root from the given path.\n\t *\n\t * @param string path\n\t * @return object\n\t */\n\tstatic root(path) {\n\t\treturn getRoot(path);\n\t}\n\n\t/**\n\t * Write the cache to local storage.\n\t *\n\t * @todo optional path to store only a singe root.\n\t * @return bool\n\t */\n\tstatic writeToLS() {\n\t\treturn writeToLS();\n\t}\n\n\t/**\n\t * Soft delete the root at the given root.\n\t *\n\t * @param string path\n\t * @return bool\n\t */\n\tstatic trash(path) {\n\t\treturn trash(path);\n\t}\n\n\t/**\n\t * Check if the given path has been soft deleted.\n\t *\n\t * @param string path\n\t * @return bool\n\t */\n\tstatic isTrashed(path) {\n\t\treturn isTrashed(path);\n\t}\n\n\t/**\n\t * Hard delete the root at the given path.\n\t *\n\t * @param string path\n\t * @return bool\n\t */\n\tstatic forget(path) {\n\t\treturn forget(path);\n\t}\n\n\t/**\n\t * Flush all roots from the cache.\n\t *\n\t * @return void\n\t */\n\tstatic flush() {\n\t\tflush()\n\t}\n\n\t/**\n\t * Destroy the entire cache.\n\t *\n\t * @return void\n\t */\n\tstatic destroy() {\n\t\tdestroy();\n\t}\n\n\t/**\n\t * Export the entire cache to json, or the given path.\n\t *\n\t * @todo optional parameter to return the json string for a given path.\n\t * @return string\n\t */\n\tstatic toJson() {\n\t\treturn toJson();\n\t}\n\n\t/**\n\t * Get the size of the entire cache in bytes.\n\t *\n\t * @todo optional size of a given path if one is provided.\n\t * @return string\n\t */\n\tstatic size() {\n\t\treturn size();\n\t}\n\n\t/**\n\t * Get the count of roots in the cache.\n\t *\n\t * @return string\n\t */\n\tstatic count() {\n\t\treturn count();\n\t}\n\n\t/**\n\t * Determine if the given value matched the value at the given path in cache.\n\t *\n\t * @param path string\n\t * @param match mixed\n\t * @return bool\n\t */\n\tstatic equals(path, match) {\n\t\treturn equals(path, match);\n\t}\n}\n\nexport default Jim;\n","import getRoot from './getRoot.js';\nimport getValue from './getValue.js';\n\nfunction has(path) {\n\tif (typeof path !== 'string') {\n\t\tthrow new TypeError(\"path must be of type 'string': '\" + typeof path + \"' given.\");\n\t}\n\t\n\tlet rootExists = typeof getRoot(path) !== 'undefined';\n\tlet valueExists = typeof getValue(path) !== 'undefined';\n\t\n\treturn rootExists || valueExists;\n}\n\nexport default has;\n","import driver from '../helpers/driver.js';\nimport setUpdatedAt from '../helpers/setUpdatedAt.js';\nimport dateFromDifferenceString from '../helpers/dateFromDifferenceString.js';\n\n\nfunction remember(path, value, expires_at) {\n\tif (typeof path !== 'string') {\n\t\tthrow new TypeError(\"path must be of type 'string'\");\n \t}\n\n\tlet memory = driver();\n\tlet item = memory.roots[path] = {};\n\texpires_at = typeof expires_at === 'undefined' ?\n\t\twindow.__jimcares.defaultExpiration :\n\t\texpires_at;\n\n\titem.value = value;\n\titem.created_at = new Date();\n\titem.updated_at = new Date();\n\titem.deleted_at = null;\n\titem.expires_at = dateFromDifferenceString(expires_at);\n\tsetUpdatedAt();\n\treturn true;\n}\n\nexport default remember;\n","import toJson from './toJson.js';\n\nfunction writeToLS(path) {\n\tif (typeof(Storage) === \"undefined\") {\n\t\tthrow new Error('Client does not support local storage');\n\t}\n\n\treturn localStorage.setItem(\"__jimcares\", toJson());\n}\n\nexport default writeToLS;\n","import getRoot from './getRoot.js';\nimport setUpdatedAt from '../helpers/setUpdatedAt.js';\n\nfunction trash(path) {\n\tif (typeof path !== 'string') {\n\t\tthrow new TypeError(\"path must be of type 'string': '\" + typeof path + \"' given.\");\n \t}\n\t\n\tlet root = getRoot(path);\n\tif (typeof root === 'undefined') {\n\t\treturn false;\n\t}\n\troot.deleted_at = new Date();\n\tsetUpdatedAt();\n\treturn true;\n}\n\nexport default trash;\n","import getRoot from './getRoot.js';\n\nfunction isTrashed(path) {\n\tif (typeof path !== 'string') {\n\t\tthrow new TypeError(\"path must be of type 'string': '\" + typeof path + \"' given.\");\n\t}\n\t\n\tlet root = getRoot(path);\n\t\n\tif (typeof root === 'undefined') {\n\t\treturn false;\n\t}\n\t\n\treturn root.deleted_at !== null;\n}\n\nexport default isTrashed;\n","import driver from '../helpers/driver.js';\nimport getPathProps from '../helpers/getPathProps.js';\nimport setUpdatedAt from '../helpers/setUpdatedAt.js';\n\nfunction flush(path) {\n\tlet memory = driver();\n\tlet exclusions = [\"created_at\", \"updated_at\"]\n\tfor (let i in memory.roots) {\n\t\tdelete memory.roots[i]\n\t}\n}\n\nexport default flush;\n","function destroy(path) {\n\tclearInterval(window.__jimcares.expirationWorker);\n\treturn delete window.__jimcares;\n}\n\nexport default destroy;\n","import driver from '../helpers/driver.js';\n\nfunction count(path) {\n\tlet memory = driver();\n\treturn Object.keys(memory.roots).length;\n}\n\nexport default count;\n","import getValue from './getValue.js';\n\nfunction equals(path, match) {\n\tif (typeof path !== 'string') {\n\t\tthrow new TypeError(\"path must be of type 'string': '\" + typeof path + \"' given.\");\n\t}\n\t\n\treturn getValue(path) === match;\n}\n\nexport default equals;\n"],"names":["driver","window","__jimcares","Error","getRoot","path","TypeError","roots","getPathProps","split","queryNotation","getValue","memory","pathProps","length","value","node","index","shift","size","object","objects","Object","prototype","toString","call","key","processed","search","push","sizeof","setUpdatedAt","updated_at","Date","toJson","JSON","stringify","forget","dateFromDifferenceString","difference","date","interval","units","checkRollover","ret","getDate","setDate","toLowerCase","setFullYear","getFullYear","setMonth","getMonth","setTime","getTime","undefined","dateAdd","settings","defaultExpiration","created_at","expirationWorker","setInterval","i","expires_at","initialise","rootExists","valueExists","has","item","deleted_at","remember","Storage","localStorage","setItem","writeToLS","root","trash","isTrashed","flush","clearInterval","keys","count","match","equals"],"mappings":"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"}